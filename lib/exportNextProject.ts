import JSZip from "jszip";
import { saveAs } from "file-saver";
import { FileNode } from "@/stores/useFileSystemStore";
import { generateCodeFromTree } from "./codeGenerator";

// helper: generate package.json
function generatePackageJson() {
  return JSON.stringify(
    {
      name: "exported-nextjs-project",
      version: "1.0.0",
      private: true,
      scripts: {
        dev: "next dev",
        build: "next build",
        start: "next start",
        lint: "next lint",
      },
      dependencies: {
        next: "14.2.3",
        react: "18.2.0",
        "react-dom": "18.2.0",
      },
      devDependencies: {
        typescript: "^5.0.0",
        "@types/react": "^18.2.0",
        "@types/node": "^20.0.0",
        tailwindcss: "3.4.3", // âœ… Tailwind v3
        postcss: "^8.4.0",
        autoprefixer: "^10.4.0"
      },
    },
    null,
    2
  );
}


// tsconfig.json
function generateTsConfig() {
  return JSON.stringify(
    {
      compilerOptions: {
        target: "es5",
        lib: ["dom", "dom.iterable", "esnext"],
        allowJs: true,
        skipLibCheck: true,
        strict: true,
        forceConsistentCasingInFileNames: true,
        noEmit: true,
        esModuleInterop: true,
        module: "esnext",
        moduleResolution: "node",
        resolveJsonModule: true,
        isolatedModules: true,
        jsx: "preserve",
        incremental: true,
      },
      include: ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
      exclude: ["node_modules"],
    },
    null,
    2
  );
}
 //tailwindconfig.json
function generateTailwindConfig() {
  return `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}"
  ],
  theme: { extend: {} },
  plugins: [],
};`;
}


function generatePostcssConfig() {
  return `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};`;
}

function generateGlobalsCss() {
  return `@tailwind base;
@tailwind components;
@tailwind utilities;`;
}

function generateLayoutTsx() {
  return `"use client";
import './globals.css';

export const metadata = {
  title: 'Exported Project',
  description: 'Generated by Website Builder',
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}`;
}



export async function exportNextProject(root: FileNode) {
  const zip = new JSZip();

  // Core config files
  zip.file("package.json", generatePackageJson());
  zip.file("tsconfig.json", generateTsConfig());
  zip.file("tailwind.config.js", generateTailwindConfig());
  zip.file("postcss.config.js", generatePostcssConfig());
  zip.file("next.config.js", `/** @type {import('next').NextConfig} */\nmodule.exports = {};`);
  zip.file("next-env.d.ts", `/// <reference types="next" />\n/// <reference types="next/types/global" />`);
  zip.file("README.md", "# Exported Next.js Project\nRun with:\n\n```bash\nnpm install\nnpm run dev\n```");

  // Project folders
  const appFolder = zip.folder("app");
  const compFolder = zip.folder("components");
  zip.folder("public");
  zip.folder("styles")?.file("globals.css", generateGlobalsCss());

  // Add layout.tsx
  appFolder?.file("layout.tsx", generateLayoutTsx());

  // Find index.tsx and components
  const findFiles = (node: FileNode) => {
    if (node.type === "file") {
      if (node.name === "index.tsx") {
        appFolder?.file("page.tsx", generateCodeFromTree(node.canvasTree || []));
      } else if (node.isCustomComponent) {
        compFolder?.file(node.name, generateCodeFromTree(node.canvasTree || []));
      }
    }
    node.children?.forEach(findFiles);
  };

  findFiles(root);

  // Generate zip
  const content = await zip.generateAsync({ type: "blob" });
  saveAs(content, "nextjs-project.zip");
}

